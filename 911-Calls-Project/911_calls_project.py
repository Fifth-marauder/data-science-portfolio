# -*- coding: utf-8 -*-
"""911 Calls Project

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xmnZxQr3z5sRe3AsJ6EPTVm81nuPqGOD

# Let's take a good long look at some data about 911 calls, shall we?
## This data is from Kaggle, listed as '911.csv'. Feel free to follow along!
"""

import numpy as np
import pandas as pd

import matplotlib.pyplot as plt
import seaborn as sns
sns.set_style('whitegrid')
# %matplotlib inline

"""## What I'm about to do next is unique to my workflow, as I am using Google Colab. If you forked this repository and are working on this on your local machine, ignore the following cells"""

from google.colab import drive
drive.mount('/gdrive')

filepath = '/gdrive/My Drive/Google Colaboratory/Colab Notebooks/911 Calls Project/'

"""# Thanks for being patient with me. Jump in right now!"""

df = pd.read_csv(filepath + '911.csv')

"""### Here we use pandas to read the '911.csv' file as a dataframe. If you are working locally, don't include the filepath concatentation."""

df.info()

"""### Using the info() method, we can see that there are 9 features in this dataframe"""

df.head(3)

"""### Using the head() function, we can get a quick overview of what the dataframe actually looks like. What we are interested in is the 'zip' column.

### Now let's use some dataframe manipulation to answer some important questions. 

Using the value_counts() function, we can see which zip codes show the most often and exactly how many times they show up
"""

df['zip'].value_counts().head(5)

"""### Now what are the top 5 townships for 911 calls?"""

df['twp'].value_counts().head(5)

"""Here we can find how many unique values there are in the 'title' column."""

df['title'].nunique()

"""## If you noticed, in the 'title' column, there are reasons/departments specified before the actual title code. This is very extraneous, so let's deal with that"""

df['Reason'] = df['title'].apply(lambda title: title.split(':')[0])

"""### Now we can find out what is the most common reason for a 911 call"""

df['Reason'].value_counts()

"""### As expected, the most common reason for calling 911 is an Emergency Medical Situation.

Let's use seaborn to plot these numbers out.
"""

sns.countplot(x='Reason', data=df, palette='viridis')

type(df['timeStamp'].iloc[0])

"""### In order to figure out stuff about the time, we first need to convert the 'timeStamp' column to DateTime objects, as they are still strings"""

df['timeStamp'] = pd.to_datetime(df['timeStamp'])

"""### Let's make things really clear by defining columns for different markers of time"""

df['Hour'] = df['timeStamp'].apply(lambda time: time.hour)
df['Month'] = df['timeStamp'].apply(lambda time: time.month)
df['Day of Week'] = df['timeStamp'].apply(lambda time: time.dayofweek)

df['Day of Week'].head()

"""It's a bit hard to read the 'Day of Week' column, so let's use a dictionary to map the actual string values"""

dmap = {0: 'Mon', 1: 'Tue', 2: 'Wed', 3: 'Thu', 4: 'Fri', 5: 'Sat', 6: 'Sun'}

df['Day of Week'] = df['Day of Week'].map(dmap)

"""## Visualizations are awesome, so let's use them to make the day of week information much more intuitive! Let's plot the day of the week with the number of 911 calls, and let's color code them based on reason"""

sns.countplot(x='Day of Week', data=df, hue='Reason', palette='viridis')

"""### Let's do the same thing for months"""

sns.countplot(x='Month', data=df, hue='Reason', palette='viridis')

byMonth = df.groupby('Month').count()
byMonth.head()

byMonth['twp'].plot()

sns.lmplot(x='Month', y='twp', data=byMonth.reset_index())

df['Date'] = df['timeStamp'].apply(lambda t: t.date())

df.groupby('Date').count()['twp'].plot()
plt.tight_layout()

df[df['Reason']=='Traffic'].groupby('Date').count()['twp'].plot()
plt.title('Traffic')
plt.tight_layout()

df[df['Reason']=='Fire'].groupby('Date').count()['twp'].plot()
plt.title('Fire')
plt.tight_layout()

df[df['Reason']=='EMS'].groupby('Date').count()['twp'].plot()
plt.title('EMS')
plt.tight_layout()

dayHour = df.groupby(by=['Day of Week', 'Hour']).count()['Reason'].unstack()
dayHour.head()

plt.figure(figsize=(12,6))
sns.heatmap(dayHour,cmap='viridis')

sns.clustermap(dayHour, cmap='viridis')

dayMonth = df.groupby(by=['Day of Week', 'Month']).count()['Reason'].unstack()
dayMonth.head()

plt.figure(figsize=(12,6))
sns.heatmap(dayMonth, cmap='viridis')

sns.clustermap(dayMonth, cmap='viridis')

